[build-system]
requires = ["setuptools>=69", "wheel", "setuptools_scm[toml]>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "StudentScore"
dynamic = ["version"]
description = "Computing score of a given student assignment"
readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE.txt" }
authors = [
  { name = "Yves Chevallier", email = "yves.chevallier@heig-vd.ch" },
]
keywords = ["testing", "functional-testing"]
classifiers = [
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: MIT License",
  "Environment :: Console",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Libraries",
  "Intended Audience :: Education",
  "Operating System :: OS Independent",
]
dependencies = [
  "voluptuous>=0.12.0",
  "click>=8.0.0",
  "pyyaml>=6.0",
  "colorama>=0.4.0",
]

[project.urls]
Documentation = "https://heig-tin-info.github.io/score/"
Source = "https://github.com/heig-tin-info/score"
Tracker = "https://github.com/heig-tin-info/score/issues"

[project.optional-dependencies]
dev = [
  "ruff>=0.5.0",
  "nox>=2024.4.15",
  "check-manifest>=0.49",
]
test = [
  "pytest>=7.0",
  "pytest-cov>=4.0",
  "coverage[toml]>=7.0",
]

[project.scripts]
score = "StudentScore.__main__:cli"

[tool.setuptools]
zip-safe = true
include-package-data = true

[tool.setuptools.packages.find]
include = ["StudentScore"]

[tool.setuptools_scm]
write_to = "StudentScore/version.py"

[tool.pytest.ini_options]
testpaths = "tests"
python_files = "test_*.py"
python_classes = "Test*"
norecursedirs = [".git", "_build"]
addopts = "--cov=StudentScore --cov-report term --cov-report xml --cov-fail-under=90"

[tool.ruff]
src = ["StudentScore", "tests"]

[tool.ruff.lint]
select = ["E", "F", "I"]

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
known-first-party = ["StudentScore"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
lines-after-imports = 2

[tool.flake8]
exclude = [".git", "__pycache__", "dist"]
max-complexity = 10
max-line-length = 100

[tool.poetry]
package-mode = false

[tool.check-manifest]
ignore = ["node_modules/*"]
